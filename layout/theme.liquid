<!doctype html>

<html lang="{{ request.locale.iso_code }}" >
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, height=device-height, minimum-scale=1.0, maximum-scale=5.0">

    <title>{% if page_title == blank %}{{ shop.name }}{% else %}{{ page_title }}{% if current_page != 1 %} &ndash; {{ 'general.page' | t: page: current_page }}{% endif %}{% endif %}</title>

    {%- if page_description -%}
      <meta name="description" content="{{ page_description | escape }}">
    {%- endif -%}

    <link rel="canonical" href="{{ canonical_url }}">

    {%- if settings.favicon -%}
      <link rel="shortcut icon" href="{{ settings.favicon | image_url: width: 96 }}">
      <link rel="apple-touch-icon" href="{{ settings.favicon | image_url: width: 180 }}">
    {%- endif -%}

    {% comment %} aos link here  {% endcomment %}
    <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
    <!-- AOS CSS -->
   <link href="https://unpkg.com/aos@2.3.4/dist/aos.css" rel="stylesheet">






    {%- comment -%}Few prefetch to increase performance on commonly used third-parties{%- endcomment -%}
    <link rel="preconnect" href="https://fonts.shopifycdn.com" crossorigin>

    {%- unless settings.heading_font.system? -%}
      <link rel="preload" href="{{ settings.heading_font | font_url }}" as="font" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- unless settings.text_font.system? -%}
      <link rel="preload" href="{{ settings.text_font | font_url }}" as="font" type="font/woff2" crossorigin>
    {%- endunless -%}

    {%- render 'social-meta-tags' -%}
    {%- render 'microdata-schema' -%}
    {%- render 'css-variables' -%}
    {%- render 'js-variables' -%}

    {%- if request.page_type == 'gift_card' -%}
      <script src="{{ 'vendor/qrcode.js' | shopify_asset_url }}" defer></script>
    {%- endif -%}

    <script type="importmap">
      {%- comment -%}On Safari 16.3 and lower, a polyfill is used to load importmap{%- endcomment -%}
      {
        "imports": {
          "vendor": "{{ 'vendor.min.js' | asset_url }}",
          "theme": "{{ 'theme.js' | asset_url }}",
          "photoswipe": "{{ 'photoswipe.min.js' | asset_url }}"
        }
      }
    </script>

    <script type="module" src="{{ 'vendor.min.js' | asset_url }}"></script>
    <script type="module" src="{{ 'theme.js' | asset_url }}"></script>

    {{ content_for_header }}
    <script src="//shopfy-features.myshopify.com/cdn/shop/t/2/assets/bq__yopose.js" defer></script>
    {{- 'theme.css' | asset_url | stylesheet_tag: preload: true -}}
  </head>

  {% liquid
    assign features_class = ''
  
    if settings.show_button_transition
      assign features_class = features_class | append: 'features--button-transition '
    endif
  
    if settings.show_image_zoom_on_hover
      assign features_class = features_class | append: 'features--zoom-image '
    endif
  %}

  <body class="{{ features_class }} color-scheme color-scheme--{{ settings.default_color_scheme.id }}">
    {%- render 'shadow-dom-templates' -%}

    <loading-bar class="loading-bar" aria-hidden="true"></loading-bar>
    <a href="#main" allow-hash-change class="skip-to-content sr-only">{{ 'general.accessibility.skip_to_content' | t }}</a>

    <span id="header-scroll-tracker" style="position: absolute; width: 1px; height: 1px; top: var(--header-scroll-tracker-offset, 10px); left: 0;">
      {%- comment -%}
        This allows our theme to track when the user has scrolled a given amount of pixels, without relying on a global scroll listener. This helps
        to improve performance and reduce reflows.
      {%- endcomment -%}
    </span>

    {%- if request.page_type != 'password' -%}
      {%- sections 'header-group' -%}
      {%- sections 'overlay-group' -%}
    {%- endif -%}

    <main id="main" class="anchor">
      {{ content_for_layout }}

      {%- comment -%}
      IMPLEMENTATION NOTE: For best semantics, having the footer group outside the main would be slightly better, but
        moving it inside the main allows to have all the sections (including sections inside the footer group) to be
        consecutive, and hence having a cleaner margin collapsing management.
      {%- endcomment -%}
      {%- if request.page_type != 'password' -%}
        {%- sections 'footer-group' -%}
      {%- endif -%}
    </main>





    {% comment %} aos here code  {% endcomment %}
     <!-- AOS JS -->
<script src="https://unpkg.com/aos@2.3.4/dist/aos.js"></script>
<script>
 AOS.init({
  duration: 5200, // default duration
  easing: 'cubic-bezier(0, 0, 0.3, 1)', // smooth easing
  once: true
});

</script>
<script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
<script>
  AOS.init();
</script>
  </body>
  {% render 'back-to-top' %}

  {% if page.template_suffix == 'landing-page' %}
    <script>
      function toggleHeaderClass() {
  const header = document.querySelector('.header');

  if (window.scrollY === 0) {
    header.classList.add('mar-no-bg');
  } else {
    header.classList.remove('mar-no-bg');
  }
}

// Run on load
toggleHeaderClass();

// Run on scroll
window.addEventListener('scroll', toggleHeaderClass);
    </script>
  {% endif %}
</html>

<style>
  @font-face {
  font-family: 'jost';
  src: url('https://cdn.shopify.com/s/files/1/0748/6311/6520/files/Jost-Regular.ttf?v=1755520258') format('truetype');
  font-weight: normal;
  font-style: normal;
}

/* Example usage */

  


</style>

<script>
(function () {
  // helpers
  function readVar(el, name) {
    return getComputedStyle(el).getPropertyValue(name).trim() || null;
  }

  // normalize var value to milliseconds number (AOS expects numeric ms)
  function toMsNumber(val) {
    if (!val) return null;
    val = val.trim();
    // pure number -> treat as ms
    if (/^-?\d+(\.\d+)?$/.test(val)) return Math.round(Number(val));
    // seconds -> convert to ms
    if (val.endsWith('s')) return Math.round(parseFloat(val) * 1000);
    // ms -> strip ms
    if (val.endsWith('ms')) return Math.round(parseFloat(val.replace('ms','')));
    return null;
  }

  function applyXoToAos() {
    const els = document.querySelectorAll('.xo-animate, [data-aos], .xo-product-card');

    els.forEach((el, fallbackIndex) => {
      // set a default AOS animation if none
      if (!el.getAttribute('data-aos')) el.setAttribute('data-aos', 'fade-up');

      // duration: prefer --xo-duration, fallback to 1000ms
      const durationNum = toMsNumber(readVar(el, '--xo-duration')) || 1000;
      el.setAttribute('data-aos-duration', String(durationNum)); // AOS expects number in ms

      // easing: prefer --xo-easing
      const easing = readVar(el, '--xo-easing') || 'cubic-bezier(0, 0, 0.3, 1)';
      el.setAttribute('data-aos-easing', easing);

      // compute delay using --xo-order and --xo-constant:
      // delay = order * constant. fallback order = index in NodeList, fallback constant = 75
      const order = Number(readVar(el, '--xo-order')) || fallbackIndex;
      const constant = Number(readVar(el, '--xo-constant')) || 75;
      const delay = Math.round(order * constant);
      el.setAttribute('data-aos-delay', String(delay));

      // optional: you can set data-aos-once per element if you want element to animate only once:
      // el.setAttribute('data-aos-once', 'true');
    });
  }

  // run once immediately
  applyXoToAos();

  // init AOS with global fallback values (these will be used when per-element attr not present)
  AOS.init({
    duration: 1000, // fallback
    easing: 'cubic-bezier(0, 0, 0.3, 1)',
    once: true
  });

  // If new slides/elements are added (carousel lazy load), re-apply and refresh AOS
  const mo = new MutationObserver((mutations) => {
    let found = false;
    for (const m of mutations) {
      for (const n of m.addedNodes) {
        if (n.nodeType !== 1) continue;
        if (n.matches && (n.matches('.xo-animate') || n.querySelector('.xo-animate') || n.matches('[data-aos]') || n.querySelector('[data-aos]'))) {
          found = true;
          break;
        }
      }
      if (found) break;
    }
    if (found) {
      applyXoToAos();
      AOS.refresh(); // recalc positions & reinit
    }
  });

  mo.observe(document.body, { childList: true, subtree: true });

})();
</script>
